//+------------------------------------------------------------------+\n//|         RSI+MA Combo EA (MT5) - Final Build (Optimized & Safe)   |\n//+------------------------------------------------------------------+\n#property script_show_inputs\n\n#include <Trade\Trade.mqh>\nCTrade trade;\n\n//---- Inputs\ninput double LotSize           = 0.01;\ninput int    RSI_Period        = 14;\ninput int    RSI_Buy_Level     = 30;\ninput int    RSI_Sell_Level    = 70;\ninput int    MA_Period         = 25;\ninput int    StopLossPips      = 20;\ninput int    TakeProfitPips    = 40;\n\ninput bool   UseTrailingStop   = true;\ninput int    TrailingStart     = 5;\ninput int    TrailingStep      = 2;\n\ninput bool   UseBreakEven      = true;\ninput int    BreakEvenTrigger  = 8;\ninput int    BreakEvenOffset   = 1;\n\ninput bool   UseTimeFilter     = true;\ninput int    TradeStartHour    = 8;\ninput int    TradeEndHour      = 18;\n\ninput bool   UseADXFilter      = true;\ninput int    ADX_Period        = 14;\ninput int    ADX_Minimum       = 20;\n\ninput bool   UseDailyLimit     = true;\ninput double DailyProfitTarget = 10.0;\ninput double DailyLossLimit    = 10.0;\ninput int    PauseDurationHours= 4;\n\ninput bool   UseDynamicExit    = true;\ninput int    ConfirmBars       = 2;\ninput double ADXExitThreshold  = 20.0;\n\ninput ulong  MagicNumber       = 12345;\n\n//---- Globals\ndatetime pausedUntil = 0;\nint pauseReason = 0; // 0 = none, 1 = profit, 2 = loss\nstring labelName = "EA_Status_Label";\ndatetime lastTradeBarTime = 0;\n\n//+------------------------------------------------------------------+\nint OnInit()\n  {\n   CreateOrUpdateLabel("‚ö™ Trading active - All systems running.", clrWhite);\n   Print("RSI+MA Combo EA (MT5) vFinal initialized.");\n   return(INIT_SUCCEEDED);\n  }\n//+------------------------------------------------------------------+\nvoid OnDeinit(const int reason)\n  {\n   ObjectDelete(0,labelName);\n  }\n//+------------------------------------------------------------------+\nvoid OnTick()\n  {\n   MqlTick tick;\n   SymbolInfoTick(_Symbol,tick);\n   double Bid = tick.bid, Ask = tick.ask;\n\n   // Daily pause logic\n   if(UseDailyLimit)\n     {\n      double todayPL = GetTodayClosedProfit();\n      if(pausedUntil <= TimeCurrent())\n        {\n         if(todayPL >= DailyProfitTarget && DailyProfitTarget > 0)\n           {\n            pausedUntil = TimeCurrent() + PauseDurationHours * 3600;\n            pauseReason = 1;\n            CreateOrUpdateLabel("üü¢ Trading paused - Daily Profit Target Hit! ‚è∞ Resumes at: " + TimeToString(pausedUntil,TIME_MINUTES), clrGreen);\n           }\n         else if(todayPL <= -MathAbs(DailyLossLimit) && DailyLossLimit > 0)\n           {\n            pausedUntil = TimeCurrent() + PauseDurationHours * 3600;\n            pauseReason = 2;\n            CreateOrUpdateLabel("üî¥ Trading paused - Daily Loss Limit Reached! ‚è∞ Resumes at: " + TimeToString(pausedUntil,TIME_MINUTES), clrRed);\n           }\n        }\n      else\n        {\n         if(pausedUntil > TimeCurrent())\n           {\n            CreateOrUpdateLabel((pauseReason==1?"üü¢ Trading paused - Daily Profit Target Hit!":"üî¥ Trading paused - Daily Loss Limit Reached!") + " ‚è∞ Resumes at: " + TimeToString(pausedUntil,TIME_MINUTES), (pauseReason==1?clrGreen:clrRed));\n            ManageTrade();\n            return;\n           }\n         else\n           {\n            pausedUntil = 0;\n            pauseReason = 0;\n            CreateOrUpdateLabel("‚ö™ Trading active - All systems running.", clrWhite);\n           }\n        }\n     }\n\n   // Time Filter\n   if(UseTimeFilter)\n     {\n      int currentHour = TimeHour(TimeCurrent());\n      if(currentHour < TradeStartHour || currentHour >= TradeEndHour)\n        {\n         ManageTrade();\n         return;\n        }\n     }\n\n   // manage open trades first\n   if(CountOpenOrders() > 0)\n     {\n      ManageTrade();\n      return;\n     }\n\n   // only trade once per bar\n   if(lastTradeBarTime == iTime(_Symbol,PERIOD_CURRENT,0)) return;\n\n   // --- Indicator handles ---\n   double rsi = iRSI(_Symbol,PERIOD_CURRENT,RSI_Period,PRICE_CLOSE,0);\n   double ma  = iMA(_Symbol,PERIOD_CURRENT,MA_Period,0,MODE_SMA,PRICE_CLOSE,0);\n   double adx = iADX(_Symbol,PERIOD_CURRENT,ADX_Period,PRICE_CLOSE,MODE_MAIN,0);\n   double plusDI = iADX(_Symbol,PERIOD_CURRENT,ADX_Period,PRICE_CLOSE,MODE_PLUSDI,0);\n   double minusDI = iADX(_Symbol,PERIOD_CURRENT,ADX_Period,PRICE_CLOSE,MODE_MINUSDI,0);\n   double price = Bid;\n\n   // ADX Filter (strength & direction)\n   if(UseADXFilter && adx < ADX_Minimum) return;\n\n   // Prevent duplicate entries per bar\n   if(IsTradingPaused()) return;\n\n   // Buy condition\n   if(rsi <= RSI_Buy_Level && price > ma && plusDI > minusDI)\n     {\n      if(!HasOpenOrder(POSITION_TYPE_BUY))\n        {\n         if(OpenTrade(POSITION_TYPE_BUY)) lastTradeBarTime = iTime(_Symbol,PERIOD_CURRENT,0);\n        }\n     }\n\n   // Sell condition\n   if(rsi >= RSI_Sell_Level && price < ma && minusDI > plusDI)\n     {\n      if(!HasOpenOrder(POSITION_TYPE_SELL))\n        {\n         if(OpenTrade(POSITION_TYPE_SELL)) lastTradeBarTime = iTime(_Symbol,PERIOD_CURRENT,0);\n        }\n     }\n  }\n//+------------------------------------------------------------------+\nbool IsTradingPaused()\n  {\n   if(!UseDailyLimit) return(false);\n   if(pausedUntil == 0) return(false);\n   return(pausedUntil > TimeCurrent());\n  }\n//+------------------------------------------------------------------+\n// Returns true if trade opened successfully\nbool OpenTrade(int type)\n  {\n   double sl,tp,price;\n   double point = SymbolInfoDouble(_Symbol,SYMBOL_POINT);\n   int digits = (int)SymbolInfoInteger(_Symbol,SYMBOL_DIGITS);\n   double pip = (digits==3 || digits==5) ? point*10 : point;\n\n   // Broker stop level check\n   double stopLevel = SymbolInfoInteger(_Symbol,SYMBOL_TRADE_STOPS_LEVEL) * pip;\n   if(StopLossPips * pip < stopLevel) { Print("SL too close to market. Adjust your StopLossPips."); return(false); }\n   if(TakeProfitPips * pip < stopLevel) { Print("TP too close to market. Adjust your TakeProfitPips."); return(false); }\n\n   ENUM_ORDER_TYPE orderType = (type==POSITION_TYPE_BUY) ? ORDER_TYPE_BUY : ORDER_TYPE_SELL;\n   double ask = SymbolInfoDouble(_Symbol,SYMBOL_ASK);\n   double bid = SymbolInfoDouble(_Symbol,SYMBOL_BID);\n\n   if(orderType==ORDER_TYPE_BUY)\n     {\n      price = ask;\n      sl = price - StopLossPips * pip;\n      tp = price + TakeProfitPips * pip;\n     }\n   else\n     {\n      price = bid;\n      sl = price + StopLossPips * pip;\n      tp = price - TakeProfitPips * pip;\n     }\n\n   bool result = trade.PositionOpen(_Symbol,orderType,LotSize,price,sl,tp,"RSI_MA_Trade",MagicNumber);\n   if(result) Print("Order opened.");\n   else Print("Order failed: ", trade.ResultRetcode());\n   return result;\n  }\n//+------------------------------------------------------------------+\n// Count open orders for this EA\nint CountOpenOrders()\n  {\n   int count = 0;\n   for(int i=0; i<PositionsTotal(); i++)\n     {\n      ulong ticket = PositionGetTicket(i);\n      if(PositionSelectByTicket(ticket))\n         if(PositionGetString(POSITION_SYMBOL)==_Symbol && PositionGetInteger(POSITION_MAGIC)==MagicNumber)\n            count++;\n     }\n   return count;\n  }\n//+------------------------------------------------------------------+\n// Returns true if an order of the given type exists\nbool HasOpenOrder(int type)\n  {\n   for(int i=0; i<PositionsTotal(); i++)\n     {\n      ulong ticket = PositionGetTicket(i);\n      if(PositionSelectByTicket(ticket))\n        {\n         if(PositionGetString(POSITION_SYMBOL)==_Symbol && PositionGetInteger(POSITION_MAGIC)==MagicNumber && PositionGetInteger(POSITION_TYPE)==type)\n            return true;\n        }\n     }\n   return false;\n  }\n//+------------------------------------------------------------------+\nvoid ManageTrade()\n  {\n   double point = SymbolInfoDouble(_Symbol,SYMBOL_POINT);\n   int digits = (int)SymbolInfoInteger(_Symbol,SYMBOL_DIGITS);\n   double pip = (digits==3 || digits==5) ? point*10 : point;\n   double stopLevel = SymbolInfoInteger(_Symbol,SYMBOL_TRADE_STOPS_LEVEL) * pip;\n\n   for(int i=0; i<PositionsTotal(); i++)\n     {\n      ulong ticket = PositionGetTicket(i);\n      if(!PositionSelectByTicket(ticket)) continue;\n      if(PositionGetString(POSITION_SYMBOL)!=_Symbol || PositionGetInteger(POSITION_MAGIC)!=MagicNumber) continue;\n      int posType = PositionGetInteger(POSITION_TYPE);\n      double openPrice = PositionGetDouble(POSITION_PRICE_OPEN);\n      double sl = PositionGetDouble(POSITION_SL);\n      double tp = PositionGetDouble(POSITION_TP);\n      double lots = PositionGetDouble(POSITION_VOLUME);\n\n      double profitPips = (posType==POSITION_TYPE_BUY) ? (SymbolInfoDouble(_Symbol,SYMBOL_BID)-openPrice)/pip : (openPrice-SymbolInfoDouble(_Symbol,SYMBOL_ASK))/pip;\n      double newSL;\n\n      // Break-even\n      if(UseBreakEven && profitPips >= BreakEvenTrigger)\n        {\n         if(posType==POSITION_TYPE_BUY && sl < openPrice)\n           {\n            newSL = openPrice + BreakEvenOffset * pip;\n            if((openPrice-newSL) >= stopLevel)\n               trade.PositionModify(ticket,newSL,tp);\n           }\n         else if(posType==POSITION_TYPE_SELL && (sl > openPrice || sl==0))\n           {\n            newSL = openPrice - BreakEvenOffset * pip;\n            if((newSL-openPrice) >= stopLevel)\n               trade.PositionModify(ticket,newSL,tp);\n           }\n        }\n\n      // Trailing stop\n      if(UseTrailingStop && profitPips >= TrailingStart)\n        {\n         if(posType==POSITION_TYPE_BUY)\n           {\n            newSL = SymbolInfoDouble(_Symbol,SYMBOL_BID) - TrailingStep * pip;\n            if(newSL > sl && (SymbolInfoDouble(_Symbol,SYMBOL_BID)-newSL) >= stopLevel)\n               trade.PositionModify(ticket,newSL,tp);\n           }\n         else if(posType==POSITION_TYPE_SELL)\n           {\n            newSL = SymbolInfoDouble(_Symbol,SYMBOL_ASK) + TrailingStep * pip;\n            if((sl==0 || newSL<sl) && (newSL-SymbolInfoDouble(_Symbol,SYMBOL_ASK)) >= stopLevel)\n               trade.PositionModify(ticket,newSL,tp);\n           }\n        }\n\n      // Dynamic Exit\n      if(UseDynamicExit)\n        {\n         double adx_now = iADX(_Symbol,PERIOD_CURRENT,ADX_Period,PRICE_CLOSE,MODE_MAIN,0);\n         if(adx_now >= ADXExitThreshold)\n           {\n            int confirmCount = 0;\n            for(int b=0; b<ConfirmBars; b++)\n              {\n               double rsi_b = iRSI(_Symbol,PERIOD_CURRENT,RSI_Period,PRICE_CLOSE,b);\n               double ma_b  = iMA(_Symbol,PERIOD_CURRENT,MA_Period,0,MODE_SMA,PRICE_CLOSE,b);\n               double plusDI_b = iADX(_Symbol,PERIOD_CURRENT,ADX_Period,PRICE_CLOSE,MODE_PLUSDI,b);\n               double minusDI_b = iADX(_Symbol,PERIOD_CURRENT,ADX_Period,PRICE_CLOSE,MODE_MINUSDI,b);\n\n               if(posType==POSITION_TYPE_BUY)\n                 {\n                  bool sellSignal = (rsi_b >= RSI_Sell_Level && iClose(_Symbol,PERIOD_CURRENT,b) < ma_b && minusDI_b > plusDI_b);\n                  if(sellSignal) confirmCount++;\n                 }\n               else if(posType==POSITION_TYPE_SELL)\n                 {\n                  bool buySignal = (rsi_b <= RSI_Buy_Level && iClose(_Symbol,PERIOD_CURRENT,b) > ma_b && plusDI_b > minusDI_b);\n                  if(buySignal) confirmCount++;\n                 }\n              }\n            if(confirmCount >= ConfirmBars)\n              {\n               bool closed = false;\n               if(posType==POSITION_TYPE_BUY)\n                  closed = trade.PositionClose(ticket);\n               else if(posType==POSITION_TYPE_SELL)\n                  closed = trade.PositionClose(ticket);\n               if(closed)\n                  Print("Dynamic Exit: Closed ", (posType==POSITION_TYPE_BUY ? "BUY" : "SELL"), " #", ticket, " after ", ConfirmBars, " confirming bars (ADX=", DoubleToString(adx_now,2), ")");\n               continue;\n              }\n           }\n        }\n     }\n  }\n//+------------------------------------------------------------------+\n// Calculate today's closed trades profit (in account currency)\ndouble GetTodayClosedProfit()\n  {\n   double sum = 0.0;\n   for(int i=0; i<HistoryDealsTotal(); i++)\n     {\n      ulong deal_ticket = HistoryDealGetTicket(i);\n      if(!HistoryDealSelect(deal_ticket)) continue;\n      if((ulong)HistoryDealGetInteger(deal_ticket,DEAL_MAGIC) != MagicNumber) continue;\n      datetime ct = (datetime)HistoryDealGetInteger(deal_ticket,DEAL_TIME);\n      if(ct==0) continue;\n      if(TimeDay(ct) == TimeDay(TimeCurrent()) &&\n         TimeMonth(ct) == TimeMonth(TimeCurrent()) &&\n         TimeYear(ct) == TimeYear(TimeCurrent()))\n         sum += HistoryDealGetDouble(deal_ticket,DEAL_PROFIT) + HistoryDealGetDouble(deal_ticket,DEAL_SWAP) + HistoryDealGetDouble(deal_ticket,DEAL_COMMISSION);\n     }\n   return(sum);\n  }\n//+------------------------------------------------------------------+\n// Create or update on-chart label with color\nvoid CreateOrUpdateLabel(string text, color clr)\n  {\n   if(ObjectFind(0,labelName) < 0)\n     {\n      ObjectCreate(0,labelName,OBJ_LABEL,0,0,0);\n      ObjectSetInteger(0,labelName,OBJPROP_CORNER,CORNER_RIGHT_UPPER);\n      ObjectSetInteger(0,labelName,OBJPROP_XDISTANCE,20);\n      ObjectSetInteger(0,labelName,OBJPROP_YDISTANCE,20);\n      ObjectSetInteger(0,labelName,OBJPROP_FONTSIZE,10);\n     }\n   ObjectSetString(0,labelName,OBJPROP_TEXT,text);\n   ObjectSetInteger(0,labelName,OBJPROP_COLOR,clr);\n  }\n//+------------------------------------------------------------------+